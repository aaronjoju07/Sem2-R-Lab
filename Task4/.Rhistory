str(Employees);Employees
str(organization);organization
print("Department Employees List:")
print(department_employees)
str(employee);employee
employee <- list(EmployeeID = 101, Name= "Shawn", Salary = 51599, Departments = c("Marketing","Finance"))
employee
#Calculate and print the employee's annual salary (12 times the monthly salary).
annual_salary = employee$Salary *12
annual_salary
#Update the employee's name to a different name.
employee$Name = "Nintu"
employee
#Add a new department to the Departments vector for the employee.
employee$Departments = c(employee$Departments,"Sales")
employee
organization <- list(Name = "Oracle", Employees = list(employee,
list(EmployeeID = 102,Name= "Vishnu",
Salary = 86399, Departments = c("Development","Management")),
list(EmployeeID = 103, Name= "Alwin",
Salary = 76431, Departments = c("Sales","Distribution"))))
#Display the entire content of the nested list organization.
organization
#Access and print the annual salary of the second employee in the organization.
Second_emp = organization$Employees[[2]]$Salary*12
Second_emp
#Access and print the name of the organization.
organization$Name
#Create a new list named department_employees that groups employees by department.Each department should have a list of employees associated with it.
department_employees <- list()
for (employee in organization$Employees) {
departments <- employee$Departments
for (dept in departments) {
if (dept %in% names(department_employees)) {
department_employees[[dept]] <- c(department_employees[[dept]], employee$Name)
} else {
department_employees[[dept]] <- list(employee$Name)
}
}
}
employee <- list(EmployeeID = 101, Name= "Shawn", Salary = 51599, Departments = c("Marketing","Finance"))
employee
#Calculate and print the employee's annual salary (12 times the monthly salary).
annual_salary = employee$Salary *12
annual_salary
#Update the employee's name to a different name.
employee$Name = "Nintu"
employee
#Add a new department to the Departments vector for the employee.
employee$Departments = c(employee$Departments,"Sales")
employee
organization <- list(Name = "Oracle", Employees = list(employee,
list(EmployeeID = 102,Name= "Vishnu",
Salary = 86399, Departments = c("Development","Management")),
list(EmployeeID = 103, Name= "Alwin",
Salary = 76431, Departments = c("Sales","Distribution"))))
#Display the entire content of the nested list organization.
organization
#Access and print the annual salary of the second employee in the organization.
Second_emp = organization$Employees[[2]]$Salary*12
Second_emp
#Access and print the name of the organization.
organization$Name
#Create a new list named department_employees that groups employees by department.Each department should have a list of employees associated with it.
department_employees <- list()
for (emp in organization$Employees) {
departments <- emp$Departments
for (dept in departments) {
if (dept %in% names(department_employees)) {
department_employees[[dept]] <- c(department_employees[[dept]], emp$Name)
} else {
department_employees[[dept]] <- list(emp$Name)
}
}
}
department_employees
#Print each list created in the script to show the structure and content of the lists after performing the operations in Tasks 1-5.
str(department_employees);department_employees
str(employee);employee
str(organization);organization
print("Department Employees List:")
print(department_employees)
str(employee);employee
#Print each list created in the script to show the structure and content of the lists after performing the operations in Tasks 1-5.
str(department_employees);department_employees
#Create a list named employee representing the details of an employee with the following components:
#EmployeeID: A unique employee identifier (as a numeric value).
#Name: The employee's full name (as a string).
#Salary: The employee's monthly salary (as a numeric value).
#Departments: A vector containing the names of the departments the employee is associated with (as strings).
employee = list(
EmployeeID = 01,
Name = "Arn",
Salary = 5000,
Departments = c("HR", "Finance")
)
#Display the entire content of the employee list.
cat("Employee ID :",employee$EmployeeID,"Employee Name :",employee$Name,"Employee Salary : $",employee$Salary,"Employee Dep : ",employee$Departments)
#Calculate and print the employee's annual salary (12 times the monthly salary).
annual_salary = employee$Salary * 12;cat("employee's annual salary : $",annual_salary)
#Update the employee's name to a different name.
employee$Name = "Aaron";cat("Updated name is ",employee$Name)
#Add a new department to the Departments vector for the employee.
employee$Departments = c(employee$Departments,"Computer");cat("Updated Dep are ",employee$Departments)
#Create a list named organization to represent an organization with the following components:
#Name: The name of the organization (as a string).
#Employees: A list containing details of at least three employees, using the structure created in Task 1.
organization = list(
organization_Name = "RMZ",
employees = list(
employee,
list(
EmployeeID = 2,
Name = "Alice Johnson",
Salary = 6000,
Departments = c("Sales", "Marketing")
),
list(
EmployeeID = 3,
Name = "Bob Wilson",
Salary = 5500,
Departments = c("IT")
)
)
)
#Display the entire content of the nested list organization.
organization
#Access and print the annual salary of the second employee in the organization.
annual_salary_2nd_emp = organization$employees[[2]]$Salary*12;cat("annual salary of the second employee in the organization is $",annual_salary_2nd_emp)
#Access and print the name of the organization.
cat("organization Name : ",organization$organization_Name)
#Create a new list named department_employees that groups employees by department. Each department should have a list of employees associated with it.
department_employees <- list(
HR = list(),
Finance = list(),
Sales = list(),
Marketing = list(),
IT = list(),
Computer = list()
)
for (emp in organization$employees) {
for (dept in emp$Departments) {
department_employees[[dept]] <- c(department_employees[[dept]], emp$Name)
}
}
department_employees
#Print each list created in the script to show the structure and content of the lists after performing the operations in Tasks 1-5.
str(department_employees);department_employees
str(employee);employee
str(organization);organization
#print the department_employees list to demonstrate how employees are grouped by department.
department_employees
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
#Load the dataset from "employee_data.csv" into a data frame in R.
# Load the data from the CSV file
employee_data = read.csv("employee_data.xlsx", header = TRUE)
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
#Load the dataset from "employee_data.csv" into a data frame in R.
# Load the data from the CSV file
employee_data = read.csv("employee_data.csv", header = TRUE)
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = FALSE),
Age = sample(18:25,100,replace = FALSE),
ExamScore = round(runif(100,min = 50,max = 100),1)
);student_score
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = TRUE),
Age = sample(18:25,100),
ExamScore = round(runif(100,min = 50,max = 100),1)
);student_score
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = TRUE),
Age = sample(18:25,100),
ExamScore = round(runif(100,min = 50,max = 100),1)
);student_score
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = TRUE),
Age = sample(18:25,100),
ExamScore = round(runif(100,min = 50,max = 100),1)
)
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = TRUE),
Age = sample(18:25,100,replace = TRUE),
ExamScore = round(runif(100,min = 50,max = 100),1)
)
#Sample dataSet
student_score = data.frame(StudentId =1:100,
Gender = sample(c("Male","Female"),100,replace = TRUE),
Age = sample(18:25,100,replace = TRUE),
ExamScore = round(runif(100,min = 50,max = 100),1)
);student_score
#CSV Files
print(getwd())
#Create a CSV data set
write.csv(student_score,"student_score.csv",row.names = FALSE)
#CSV Files
print(getwd())
setwd("/Users/aaron/Desktop/Sem2-R-Lab")
print(getwd())
data = read.csv("student_score.csv");print(data)
dataCsv = read.csv("student_score.csv");dataCsv
#CSV Files
print(getwd())
#Create a CSV data set
write.csv(student_score,"student_score.csv",row.names = FALSE)
#CSV Files
print(getwd())
dataCsv = read.csv("student_score.csv");dataCsv
is.data.frame(dataCsv)
ncol(dataCsv)
nrow(dataCsv)
#get max age from df
maxAge = max(dataCsv$Age);maxAge
head(dataCsv)
girls_above_80 = subset(dataCsv, Gender == "Female" & ExamScore > 80);girls_above_80
girls_above_80 = subset(dataCsv, Gender == "Male" & ExamScore > 80);girls_above_80
#write filtered data into new file
write.csv(girls_above_80,"Output.csv")
newData = read.csv("Output.csv.csv");newData
newData = read.csv("Output.csv");newData
#write filtered data into new file
write.csv(girls_above_80,"Output.csv",row.names = FALSE)
newData = read.csv("Output.csv");newData
girlWithHighestScore = max(newData)
#write filtered data into new file
write.csv(girls_above_80,"Output.csv",row.names = FALSE)
newData = read.csv("Output.csv");newData
girlWithHighestScore = max(newData)
girlWithHighestScore = max(newData$ExamScore)
girlWithHighestScore = max(newData$ExamScore);girlWithHighestScore
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
#Load the dataset from "employee_data.csv" into a data frame in R.
# Load the data from the CSV file
print(getwd())
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
#Load the dataset from "employee_data.csv" into a data frame in R.
# Load the data from the CSV file
print(getwd())
setwd("/Users/aaron/Desktop/Sem2-R-Lab/Task4")
print(getwd())
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
#Load the dataset from "employee_data.csv" into a data frame in R.
# Load the data from the CSV file
print(getwd())
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$Joining.Date,units = "days"))/365.25
employee_data$yearOfService
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
# Filter the "Senior Employees" data frame
Senior_Employees <- subset(employee_data, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(Joining.Date, "%Y")) >= 5)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$Joining.Date,units = "days"))/365.25;employee_data
Senior_Employees_DateFrame = data.frame(employee_data,Senior_Employees)
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
Senior_Employees = subset(employee_data, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(Joining.Date, "%Y")) >= 5);Senior_Employees
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
Senior_Employees = subset(employee_data, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(employee_data$Joining.Date, "%Y")) >= 5);Senior_Employees
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
Senior_Employees = subset(employee_data$Joining.Date, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(employee_data$Joining.Date, "%Y")) >= 5);Senior_Employees
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
Senior_Employees = subset(employee_data, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(employee_data$Joining.Date, "%Y")) >= 5);Senior_Employees
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
Senior_Employees = subset(employee_data, as.numeric(format(Sys.Date(), "%Y")) - as.numeric(format(employee_data$Joining.Date, "%Y")) >= 5);Senior_Employees
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$Joining.Date,units = "days"))/365.25;employee_data
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$Joining.Date,units = "days"))/365.25;employee_data
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$Joining.Date,units = "days"))/365.25;employee_data
employee_data = read.csv("employee_data.csv");employee_data
# Load the data from the CSV file
print(getwd())
setwd("/Users/aaron/Desktop/Sem2-R-Lab/Task4")
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
# Load the data from the CSV file
print(getwd())
setwd("/Users/aaron/Desktop/Sem2-R-Lab/Task4")
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
employee_data_frame = data.frame(
Employee_ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29),
Name = c("John Doe", "Jane Doe", "Peter Parker", "Mary Jane Watson", "Bruce Wayne", "Clark Kent", "Diana Prince", "Arthur Curry", "Victor Stone", "Barry Allen", "Kamala Khan", "Miles Morales", "Riri Williams", "Laura Kinney", "Jean Grey", "Logan", "Scott Summers", "Charles Xavier", "Erik Lensherr", "Thanos", "Galactus", "Beyonder", "The Living Tribunal", "One-Above-All", "The Presence", "Adam", "Gamora", "Drax the Destroyer", "Rocket Raccoon"),
Department = c("Engineering", "Sales", "Marketing", "HR", "CEO", "Journalist", "Ambassador", "Aquaman", "Cyborg", "The Flash", "Intern", "Spider-Man", "Ironheart", "X-23", "Phoenix", "Wolverine", "Cyclops", "Professor X", "Magneto", "Mad Titan", "Planet Devourer", "Cosmic Entity", "Cosmic Judge", "Supreme Being", "God", "Guardian of the Galaxy", "Zehoberei", "Praxagore", "Halfworld"),
Salary_USD = c(10000, 8000, 7000, 6000, 20000, 5000, 4000, 3000, 2000, 1000, 1500, 2500, 3500, 4500, 5500, 6500, 7500, 8500, 9500, 10500, 11500, 12500, 13500, 14500, 15500, 16500, 17500, 18500, 19500),
Joining_Date = c("2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09")
);employee_data_frame
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
employee_data_frame = data.frame(
Employee_ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29),
Name = c("John Doe", "Jane Doe", "Peter Parker", "Mary Jane Watson", "Bruce Wayne", "Clark Kent", "Diana Prince", "Arthur Curry", "Victor Stone", "Barry Allen", "Kamala Khan", "Miles Morales", "Riri Williams", "Laura Kinney", "Jean Grey", "Logan", "Scott Summers", "Charles Xavier", "Erik Lensherr", "Thanos", "Galactus", "Beyonder", "The Living Tribunal", "One-Above-All", "The Presence", "Adam", "Gamora", "Drax the Destroyer", "Rocket Raccoon"),
Department = c("Engineering", "Sales", "Marketing", "HR", "CEO", "Journalist", "Ambassador", "Aquaman", "Cyborg", "The Flash", "Intern", "Spider-Man", "Ironheart", "X-23", "Phoenix", "Wolverine", "Cyclops", "Professor X", "Magneto", "Mad Titan", "Planet Devourer", "Cosmic Entity", "Cosmic Judge", "Supreme Being", "God", "Guardian of the Galaxy", "Zehoberei", "Praxagore", "Halfworld"),
Salary_USD = c(10000, 8000, 7000, 6000, 20000, 5000, 4000, 3000, 2000, 1000, 1500, 2500, 3500, 4500, 5500, 6500, 7500, 8500, 9500, 10500, 11500, 12500, 13500, 14500, 15500, 16500, 17500, 18500, 19500),
Joining_Date = c("2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09", "2023-01-01", "2022-04-04", "2012-03-01", "2012-05-05", "2013-07-07", "2020-09-09")
)
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
employee_data <- data.frame(
EmployeeID = 1:10,
Name = c("Pavi", "Lahari", "Manju", "Priya", "Vishnu", "Aaron", "Alwin", "Amar", "Ann", "Sona"),
Department = c("R&D", "IT", "Finance", "IT", "HR", "Marketing", "R&D", "IT", "Marketing", "HR"),
Salary = c(90000, 68000, 33500, 33500, 90900, 48200, 21300, 66100, 85900, 16400),
JoiningDate = c("2020-04-16", "2019-10-07", "2021-05-30", "2018-12-16", "2022-11-20", "2019-01-03", "2020-06-01", "2017-06-17", "2020-02-25", "2019-05-14")
)
# Save the data frame to a CSV file
write.csv(employee_data, "employee_data.csv", row.names = FALSE)
#Load the dataset from "employee_data.csv" into a data frame in R.
employee_data = read.csv("employee_data.csv");employee_data
#Display the structure of the data frame, including column names and data types.
str(employee_data)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$Joining.Date = as.Date(employee_data$Joining.Date)
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$JoiningDate
#Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
employee_data$JoiningDate = as.Date(employee_data$JoiningDate)
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$JoiningDate,units = "days"))/365.25;employee_data
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
senior_employees = subset(employee_data, YearsOfService >= 5)
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
senior_employees = subset(employee_data, employee_data$YearsOfService >= 5)
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
senior_employees = subset(employee_data, employee_data$YearsOfService >= 5);senior_employees
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$JoiningDate,units = "days"))/365.;employee_data
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
senior_employees = subset(employee_data, employee_data$YearsOfService >= 5);senior_employees
#Calculate and print the average salary of employees in each department.
employee_data$yearOfService = as.numeric(difftime(Sys.Date(),employee_data$JoiningDate,units = "days"))/365.;employee_data
#Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
senior_employees = subset(employee_data, employee_data$YearsOfService >= 5);senior_employees
employee_data <- data.frame(
EmployeeID = 1:100,
Name = paste("Employee", 1:100),
Department = sample(c("HR", "IT", "Finance", "Marketing"), 100, replace = TRUE),
Salary = sample(50000:100000, 100),
JoiningDate = sample(seq(as.Date('2010-01-01'), as.Date('2023-01-01'), by="days"), 100)
)
write.csv(employee_data,"employee_data.csv",row.names = FALSE)
# Load the dataset from "employee_data.csv" into a data frame in R.
data <- read.csv("employee_data.csv")
# Display the structure of the data frame, including column names and data types.
str(data)
# Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
data$JoiningDate <- as.Date(data$JoiningDate)
data$YearsOfService <- as.numeric(difftime(Sys.Date(), data$JoiningDate, units = "days")/365.25)
# Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
SeniorEmployees <- data[data$YearsOfService >= 5, ]
# Calculate and print the average salary of employees in each department.
avg_salary_by_department <- tapply(data$Salary, data$Department, mean)
print(avg_salary_by_department)
# Determine the highest and lowest salaries in the entire dataset and identify the employees with these salaries.
max_salary <- max(data$Salary)
min_salary <- min(data$Salary)
employee_with_max_salary <- data[data$Salary == max_salary, ]
employee_with_min_salary <- data[data$Salary == min_salary, ]
# Print the results
cat("Highest Salary:", max_salary, "Employee:", employee_with_max_salary$Name, "\n")
cat("Lowest Salary:", min_salary, "Employee:", employee_with_min_salary$Name, "\n")
# Create a bar plot to visualize the number of employees in each department.
barplot(table(data$Department), main="Number of Employees in Each Department", xlab="Department", ylab="Number of Employees", col="skyblue")
# Generate a scatter plot to explore the relationship between years of service and salary.
plot(data$YearsOfService, data$Salary, main="Scatter Plot of Years of Service vs. Salary", xlab="Years of Service", ylab="Salary", pch=16, col="darkgreen")
# Save the "Senior Employees" data frame as a CSV file named "senior_employees.csv."
write.csv(SeniorEmployees, "senior_employees.csv", row.names = FALSE)
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
employee_data <- data.frame(
EmployeeID = 1:100,
Name = paste("Emp", 1:100),
Department = sample(c("HR", "IT", "Finance", "Marketing"), 100, replace = TRUE),
Salary = sample(50000:100000, 100),
JoiningDate = sample(seq(as.Date('2010-01-01'), as.Date('2023-01-01'), by="days"), 100)
)
write.csv(employee_data,"employee_data.csv",row.names = FALSE)
# Load the dataset from "employee_data.csv" into a data frame in R.
data <- read.csv("employee_data.csv")
# Display the structure of the data frame, including column names and data types.
str(data)
# Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
data$JoiningDate <- as.Date(data$JoiningDate)
data$YearsOfService <- as.numeric(difftime(Sys.Date(), data$JoiningDate, units = "days")/365.25)
# Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
SeniorEmployees <- data[data$YearsOfService >= 5, ]
# Calculate and print the average salary of employees in each department.
avg_salary_by_department <- tapply(data$Salary, data$Department, mean)
print(avg_salary_by_department)
# Determine the highest and lowest salaries in the entire dataset and identify the employees with these salaries.
max_salary <- max(data$Salary)
min_salary <- min(data$Salary)
employee_with_max_salary <- data[data$Salary == max_salary, ]
employee_with_min_salary <- data[data$Salary == min_salary, ]
# Print the results
cat("Highest Salary:", max_salary, "Employee:", employee_with_max_salary$Name, "\n")
cat("Lowest Salary:", min_salary, "Employee:", employee_with_min_salary$Name, "\n")
# Create a bar plot to visualize the number of employees in each department.
barplot(table(data$Department), main="Number of Employees in Each Department", xlab="Department", ylab="Number of Employees", col="skyblue")
# Generate a scatter plot to explore the relationship between years of service and salary.
plot(data$YearsOfService, data$Salary, main="Scatter Plot of Years of Service vs. Salary", xlab="Years of Service", ylab="Salary", pch=16, col="darkgreen")
# Save the "Senior Employees" data frame as a CSV file named "senior_employees.csv."
write.csv(SeniorEmployees, "senior_employees.csv", row.names = FALSE)
#Create a sample dataset in a CSV file named "employee_data.csv." The dataset should contain the following columns:
# Employee ID: A unique identifier for each employee.
#Name: The name of the employee.
#Department: The department in which the employee works.
#Salary: The monthly salary of the employee (in USD).
#Joining Date: The date on which the employee joined the company (in YYYY-MM-DD format).
employee_data <- data.frame(
EmployeeID = 1:20,
Name = c("Aaron", "Lahari", "Anna", "Priya", "Vishnu", "Pavi", "Alwin", "Amar", "Ann", "Sona","Ashwin","Akhil","Sidharth","Abin","Rojal","Joe","Mohith","DKB","Hiran","Shawn"),
Department = sample(c("HR", "IT", "Finance", "Marketing"), 20, replace = TRUE),
Salary = sample(50000:100000, 20),
JoiningDate = sample(seq(as.Date('2010-01-01'), as.Date('2023-01-01'), by="days"), 20)
)
write.csv(employee_data,"employee_data.csv",row.names = FALSE)
# Load the dataset from "employee_data.csv" into a data frame in R.
data <- read.csv("employee_data.csv")
# Display the structure of the data frame, including column names and data types.
str(data)
# Calculate and add a new column named "Years of Service" to the data frame, representing the number of years each employee has worked in the company.
data$JoiningDate <- as.Date(data$JoiningDate)
data$YearsOfService <- as.numeric(difftime(Sys.Date(), data$JoiningDate, units = "days")/365.25)
# Create a new data frame named "Senior Employees" containing records of employees who have worked for the company for 5 or more years.
SeniorEmployees <- data[data$YearsOfService >= 5, ]
# Calculate and print the average salary of employees in each department.
avg_salary_by_department <- tapply(data$Salary, data$Department, mean)
print(avg_salary_by_department)
# Determine the highest and lowest salaries in the entire dataset and identify the employees with these salaries.
max_salary <- max(data$Salary)
min_salary <- min(data$Salary)
employee_with_max_salary <- data[data$Salary == max_salary, ]
employee_with_min_salary <- data[data$Salary == min_salary, ]
# Print the results
cat("Highest Salary:", max_salary, "Employee:", employee_with_max_salary$Name, "\n")
cat("Lowest Salary:", min_salary, "Employee:", employee_with_min_salary$Name, "\n")
# Create a bar plot to visualize the number of employees in each department.
barplot(table(data$Department), main="Number of Employees in Each Department", xlab="Department", ylab="Number of Employees", col="skyblue")
# Generate a scatter plot to explore the relationship between years of service and salary.
plot(data$YearsOfService, data$Salary, main="Scatter Plot of Years of Service vs. Salary", xlab="Years of Service", ylab="Salary", pch=16, col="darkgreen")
# Save the "Senior Employees" data frame as a CSV file named "senior_employees.csv."
write.csv(SeniorEmployees, "senior_employees.csv", row.names = FALSE)
